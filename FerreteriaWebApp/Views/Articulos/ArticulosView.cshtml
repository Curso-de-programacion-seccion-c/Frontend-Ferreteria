@model List<FerreteriaWebApp.Models.ArticulosModel>

@{
    ViewBag.Title = "Artículos";
}

<h1>Articulos</h1>

@Html.AntiForgeryToken()

<!--BÓTÓN DE AGREGAR ARTICULOS-->
<button id="btn-agregar-articulo" class="btn btn-outline-success mb-3">
    <i class="fa fa-plus"></i> Agregar Artículo
</button>

<!--TABLA-->
<table class="table table-striped table-bordered table-hover table-striped-columns">
    <!--ENCABEZADO DE LA TABLA-->
    <thead class="bg-warning text-dark">
        <tr>
            <th>ID</th>
            <th>Código</th>
            <th>Nombre</th>
            <th>Precio</th>
            <th>Stock</th>
            <th>Descripción</th>
            <th>ID Categoría</th>
            <th>ID Proveedor</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <!--CUERPO DE LA TABLA-->
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.IdArticulo</td>
                <td>@item.CodeArticulo</td>
                <td>@item.NombreArticulo</td>
                <td>@item.Precio</td>
                <td>@item.Stock</td>
                <td>@item.Descripcion</td>
                <td>@item.IdCategoria</td>
                <td>@item.IdProveedor</td>
                <!--BÓTÓN EDITAR-->
                <td>
                    <button class="btn btn-sm btn-info edit-btn"
                            data-id="@item.IdArticulo"
                            data-code="@item.CodeArticulo"
                            data-nombre="@item.NombreArticulo"
                            data-precio="@item.Precio"
                            data-stock="@item.Stock"
                            data-descripcion="@item.Descripcion"
                            data-idcategoria="@item.IdCategoria"
                            data-idproveedor="@item.IdProveedor">
                        <i class="fa fa-pen"></i>
                    </button>
                    <!--BÓTÓN DE ELIMINAR-->
                    <button class="btn btn-sm btn-danger delete-btn"
                            data-id="@item.IdArticulo"
                            data-nombre="@item.NombreArticulo">
                        <i class="fa fa-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    // Primero carga el HTML y antes de ejecutar el script
    document.addEventListener("DOMContentLoaded", function () {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

        // AGREGAR ARTÍCULO
        document.getElementById("btn-agregar-articulo").addEventListener("click", function () {
            Swal.fire({
                title: 'Agregar Nuevo Artículo',
                html: `
                    <input id="swal-code" class="swal2-input" placeholder="Código">
                    <input id="swal-nombre" class="swal2-input" placeholder="Nombre">
                    <input id="swal-precio" class="swal2-input" placeholder="Precio">
                    <input id="swal-stock" class="swal2-input" placeholder="Stock">
                    <input id="swal-descripcion" class="swal2-input" placeholder="Descripción">
                    <input id="swal-idcategoria" class="swal2-input" placeholder="ID Categoría">
                    <input id="swal-idproveedor" class="swal2-input" placeholder="ID Proveedor">
                `,
                showCancelButton: true,
                confirmButtonText: 'Agregar',
                cancelButtonText: 'Cancelar',
                customClass: {
                    confirmButton: 'btn btn-success',
                    cancelButton: 'btn btn-secondary'
                },
                buttonsStyling: false,
                preConfirm: () => {
                    const code = parseInt(document.getElementById('swal-code').value);
                    const nombre = document.getElementById('swal-nombre').value.trim();
                    if (!code || !nombre) {
                        Swal.showValidationMessage("Código y Nombre son obligatorios.");
                        return false;
                    }
                    return {
                        code: code,
                        nombre: nombre,
                        precio: parseFloat(document.getElementById('swal-precio').value),
                        stock: parseInt(document.getElementById('swal-stock').value),
                        descripcion: document.getElementById('swal-descripcion').value,
                        idCategoria: parseInt(document.getElementById('swal-idcategoria').value),
                        idProveedor: parseInt(document.getElementById('swal-idproveedor').value)
                    };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Articulos/AgregarArticulo', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({
                            CodeArticulo: result.value.code,
                            NombreArticulo: result.value.nombre,
                            Precio: result.value.precio,
                            Stock: result.value.stock,
                            Descripcion: result.value.descripcion,
                            IdCategoria: result.value.idCategoria,
                            IdProveedor: result.value.idProveedor
                        })
                    }).then(async response => {
                        if (response.ok) {
                            Swal.fire('Agregado', 'El artículo se agregó exitosamente.', 'success')
                                .then(() => location.reload());
                        } else {
                            const errorText = await response.text();
                            Swal.fire('Error', `No se pudo agregar: ${errorText}`, 'error');
                        }
                    });
                }
            });
        });


    // EDITAR
        $(document).ready(function () {
            $(".edit-btn").each(function () {
                $(this).on("click", function () {
                    const id = $(this).data("id");
                    const code = $(this).data("code");
                    const nombre = $(this).data("nombre");
                    const precio = $(this).data("precio");
                    const stock = $(this).data("stock");
                    const descripcion = $(this).data("descripcion");
                    const idCategoria = $(this).data("idcategoria");
                    const idProveedor = $(this).data("idproveedor");

                    Swal.fire({
                        title: 'Editar Artículo',
                        html: `
                    <input id="swal-nombre" class="swal2-input" placeholder="Nombre" value="${nombre}">
                    <input id="swal-precio" class="swal2-input" placeholder="Precio" value="${precio}">
                    <input id="swal-stock" class="swal2-input" placeholder="Stock" value="${stock}">
                    <input id="swal-descripcion" class="swal2-input" placeholder="Descripción" value="${descripcion}">
                    <input id="swal-idcategoria" class="swal2-input" placeholder="ID Categoría" value="${idCategoria}">
                    <input id="swal-idproveedor" class="swal2-input" placeholder="ID Proveedor" value="${idProveedor}">
                `,
                        showCancelButton: true,
                        confirmButtonText: 'Guardar',
                        preConfirm: () => {
                            return {
                                id: parseInt(id),
                                code: parseInt(code),
                                nombre: $('#swal-nombre').val(),
                                precio: parseFloat($('#swal-precio').val()),
                                stock: parseInt($('#swal-stock').val()),
                                descripcion: $('#swal-descripcion').val(),
                                idCategoria: parseInt($('#swal-idcategoria').val()),
                                idProveedor: parseInt($('#swal-idproveedor').val())
                            };
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch('/Articulos/EditarArticulo', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                },
                                body: JSON.stringify({
                                    IdArticulo: result.value.id,
                                    CodeArticulo: result.value.code,
                                    NombreArticulo: result.value.nombre,
                                    Precio: result.value.precio,
                                    Stock: result.value.stock,
                                    Descripcion: result.value.descripcion,
                                    IdCategoria: result.value.idCategoria,
                                    IdProveedor: result.value.idProveedor
                                })
                            }).then(async response => {
                                if (response.ok) {
                                    Swal.fire('Actualizado', 'El artículo ha sido modificado.', 'success').then(() => {
                                        const row = $(`button[data-id="${result.value.id}"]`).closest('tr');
                                        row.children().eq(2).text(result.value.nombre);
                                        row.children().eq(3).text(result.value.precio.toFixed(2));
                                        row.children().eq(4).text(result.value.stock);
                                        row.children().eq(5).text(result.value.descripcion);
                                        row.children().eq(6).text(result.value.idCategoria);
                                        row.children().eq(7).text(result.value.idProveedor);

                                        const editBtn = row.find('.edit-btn').data({
                                            nombre: result.value.nombre,
                                            precio: result.value.precio,
                                            stock: result.value.stock,
                                            descripcion: result.value.descripcion,
                                            idcategoria: result.value.idCategoria,
                                            idproveedor: result.value.idProveedor
                                        });
                                    });
                                } else {
                                    const errorText = await response.text();
                                    Swal.fire('Error', `No se pudo actualizar: ${errorText}`, 'error');
                                }
                            });
                        }
                    });
                });
            });
        });

    // ELIMINAR
    const deleteButtons = document.querySelectorAll(".delete-btn");
    deleteButtons.forEach(button => {
        button.addEventListener("click", function () {
            const id = this.dataset.id;
            const nombre = this.dataset.nombre;

            Swal.fire({
                title: '¿Estás seguro?',
                text: `¿Deseas eliminar el artículo "${nombre}"?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Articulos/EliminarArticulo', { //Cambiar por la ruta
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            ...(token && { 'RequestVerificationToken': token })
                        },
                        body: JSON.stringify({ idArticulo: parseInt(id) })
                    }).then(async response => {
                        console.log(response);
                        if (response.ok) {
                            Swal.fire('Eliminado', `El artículo "${nombre}" ha sido eliminado.`, 'success')
                                .then(() => {
                                    const row = document.querySelector(`button[data-id="${id}"]`).closest('tr');
                                    row.remove();
                                });
                        } else {
                            const errorText = await response.text();
                            Swal.fire('Error', `No se pudo eliminar: ${errorText}`, 'error');
                        }
                    });
                }
            });
        });
    });

    });
</script>
